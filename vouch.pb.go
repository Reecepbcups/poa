// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: strangelove_ventures/poa/v1/vouch.proto

package poa

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Vouch struct {
	VoucherAddress   []byte `protobuf:"bytes,1,opt,name=voucher_address,json=voucherAddress,proto3" json:"voucher_address,omitempty"`
	CandidateAddress []byte `protobuf:"bytes,2,opt,name=candidate_address,json=candidateAddress,proto3" json:"candidate_address,omitempty"`
	InFavor          bool   `protobuf:"varint,3,opt,name=in_favor,json=inFavor,proto3" json:"in_favor,omitempty"`
}

func (m *Vouch) Reset()         { *m = Vouch{} }
func (m *Vouch) String() string { return proto.CompactTextString(m) }
func (*Vouch) ProtoMessage()    {}
func (*Vouch) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d8f41519684ac51, []int{0}
}
func (m *Vouch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vouch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vouch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vouch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vouch.Merge(m, src)
}
func (m *Vouch) XXX_Size() int {
	return m.Size()
}
func (m *Vouch) XXX_DiscardUnknown() {
	xxx_messageInfo_Vouch.DiscardUnknown(m)
}

var xxx_messageInfo_Vouch proto.InternalMessageInfo

func (m *Vouch) GetVoucherAddress() []byte {
	if m != nil {
		return m.VoucherAddress
	}
	return nil
}

func (m *Vouch) GetCandidateAddress() []byte {
	if m != nil {
		return m.CandidateAddress
	}
	return nil
}

func (m *Vouch) GetInFavor() bool {
	if m != nil {
		return m.InFavor
	}
	return false
}

func init() {
	proto.RegisterType((*Vouch)(nil), "strangelove_ventures.poa.v1.Vouch")
}

func init() {
	proto.RegisterFile("strangelove_ventures/poa/v1/vouch.proto", fileDescriptor_1d8f41519684ac51)
}

var fileDescriptor_1d8f41519684ac51 = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2f, 0x2e, 0x29, 0x4a,
	0xcc, 0x4b, 0x4f, 0xcd, 0xc9, 0x2f, 0x4b, 0x8d, 0x2f, 0x4b, 0xcd, 0x2b, 0x29, 0x2d, 0x4a, 0x2d,
	0xd6, 0x2f, 0xc8, 0x4f, 0xd4, 0x2f, 0x33, 0xd4, 0x2f, 0xcb, 0x2f, 0x4d, 0xce, 0xd0, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x92, 0xc6, 0xa6, 0x50, 0xaf, 0x20, 0x3f, 0x51, 0xaf, 0xcc, 0x50, 0xa9,
	0x82, 0x8b, 0x35, 0x0c, 0xa4, 0x56, 0x48, 0x9d, 0x8b, 0x1f, 0xac, 0x29, 0xb5, 0x28, 0x3e, 0x31,
	0x25, 0xa5, 0x28, 0xb5, 0xb8, 0x58, 0x82, 0x51, 0x81, 0x51, 0x83, 0x27, 0x88, 0x0f, 0x2a, 0xec,
	0x08, 0x11, 0x15, 0xd2, 0xe6, 0x12, 0x4c, 0x4e, 0xcc, 0x4b, 0xc9, 0x4c, 0x49, 0x2c, 0x49, 0x85,
	0x2b, 0x65, 0x02, 0x2b, 0x15, 0x80, 0x4b, 0xc0, 0x14, 0x4b, 0x72, 0x71, 0x64, 0xe6, 0xc5, 0xa7,
	0x25, 0x96, 0xe5, 0x17, 0x49, 0x30, 0x2b, 0x30, 0x6a, 0x70, 0x04, 0xb1, 0x67, 0xe6, 0xb9, 0x81,
	0xb8, 0x4e, 0xb6, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3,
	0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0xa5, 0x9c, 0x9e,
	0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x8f, 0xe4, 0x76, 0x5d, 0x64, 0x4f, 0x26,
	0xb1, 0x81, 0x3d, 0x67, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x13, 0x68, 0xda, 0x07, 0x01,
	0x00, 0x00,
}

func (m *Vouch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vouch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vouch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InFavor {
		i--
		if m.InFavor {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.CandidateAddress) > 0 {
		i -= len(m.CandidateAddress)
		copy(dAtA[i:], m.CandidateAddress)
		i = encodeVarintVouch(dAtA, i, uint64(len(m.CandidateAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VoucherAddress) > 0 {
		i -= len(m.VoucherAddress)
		copy(dAtA[i:], m.VoucherAddress)
		i = encodeVarintVouch(dAtA, i, uint64(len(m.VoucherAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVouch(dAtA []byte, offset int, v uint64) int {
	offset -= sovVouch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Vouch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VoucherAddress)
	if l > 0 {
		n += 1 + l + sovVouch(uint64(l))
	}
	l = len(m.CandidateAddress)
	if l > 0 {
		n += 1 + l + sovVouch(uint64(l))
	}
	if m.InFavor {
		n += 2
	}
	return n
}

func sovVouch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVouch(x uint64) (n int) {
	return sovVouch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Vouch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVouch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vouch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vouch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVouch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVouch
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVouch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoucherAddress = append(m.VoucherAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.VoucherAddress == nil {
				m.VoucherAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CandidateAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVouch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVouch
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVouch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CandidateAddress = append(m.CandidateAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.CandidateAddress == nil {
				m.CandidateAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InFavor", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVouch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InFavor = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipVouch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVouch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVouch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVouch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVouch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVouch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVouch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVouch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVouch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVouch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVouch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVouch = fmt.Errorf("proto: unexpected end of group")
)
