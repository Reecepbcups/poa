// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: strangelove_ventures/poa/v1/query.proto

package poav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_QueryValidator_FullMethodName  = "/strangelove_ventures.poa.v1.Query/QueryValidator"
	Query_QueryValidators_FullMethodName = "/strangelove_ventures.poa.v1.Query/QueryValidators"
	Query_QueryVouch_FullMethodName      = "/strangelove_ventures.poa.v1.Query/QueryVouch"
	Query_QueryVouches_FullMethodName    = "/strangelove_ventures.poa.v1.Query/QueryVouches"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	QueryValidator(ctx context.Context, in *QueryValidatorRequest, opts ...grpc.CallOption) (*QueryValidatorResponse, error)
	QueryValidators(ctx context.Context, in *QueryValidatorsRequest, opts ...grpc.CallOption) (*QueryValidatorsResponse, error)
	QueryVouch(ctx context.Context, in *QueryVouchRequest, opts ...grpc.CallOption) (*QueryVouchResponse, error)
	QueryVouches(ctx context.Context, in *QueryVouchesRequest, opts ...grpc.CallOption) (*QueryVouchesResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryValidator(ctx context.Context, in *QueryValidatorRequest, opts ...grpc.CallOption) (*QueryValidatorResponse, error) {
	out := new(QueryValidatorResponse)
	err := c.cc.Invoke(ctx, Query_QueryValidator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryValidators(ctx context.Context, in *QueryValidatorsRequest, opts ...grpc.CallOption) (*QueryValidatorsResponse, error) {
	out := new(QueryValidatorsResponse)
	err := c.cc.Invoke(ctx, Query_QueryValidators_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVouch(ctx context.Context, in *QueryVouchRequest, opts ...grpc.CallOption) (*QueryVouchResponse, error) {
	out := new(QueryVouchResponse)
	err := c.cc.Invoke(ctx, Query_QueryVouch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVouches(ctx context.Context, in *QueryVouchesRequest, opts ...grpc.CallOption) (*QueryVouchesResponse, error) {
	out := new(QueryVouchesResponse)
	err := c.cc.Invoke(ctx, Query_QueryVouches_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	QueryValidator(context.Context, *QueryValidatorRequest) (*QueryValidatorResponse, error)
	QueryValidators(context.Context, *QueryValidatorsRequest) (*QueryValidatorsResponse, error)
	QueryVouch(context.Context, *QueryVouchRequest) (*QueryVouchResponse, error)
	QueryVouches(context.Context, *QueryVouchesRequest) (*QueryVouchesResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) QueryValidator(context.Context, *QueryValidatorRequest) (*QueryValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryValidator not implemented")
}
func (UnimplementedQueryServer) QueryValidators(context.Context, *QueryValidatorsRequest) (*QueryValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryValidators not implemented")
}
func (UnimplementedQueryServer) QueryVouch(context.Context, *QueryVouchRequest) (*QueryVouchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVouch not implemented")
}
func (UnimplementedQueryServer) QueryVouches(context.Context, *QueryVouchesRequest) (*QueryVouchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVouches not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_QueryValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryValidator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryValidator(ctx, req.(*QueryValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryValidators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryValidators(ctx, req.(*QueryValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryVouch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVouchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVouch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryVouch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVouch(ctx, req.(*QueryVouchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryVouches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVouchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVouches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryVouches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVouches(ctx, req.(*QueryVouchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strangelove_ventures.poa.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryValidator",
			Handler:    _Query_QueryValidator_Handler,
		},
		{
			MethodName: "QueryValidators",
			Handler:    _Query_QueryValidators_Handler,
		},
		{
			MethodName: "QueryVouch",
			Handler:    _Query_QueryVouch_Handler,
		},
		{
			MethodName: "QueryVouches",
			Handler:    _Query_QueryVouches_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strangelove_ventures/poa/v1/query.proto",
}
